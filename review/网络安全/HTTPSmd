### `http`和`https`

<https://segmentfault.com/a/1190000012196642>

`https`不是一种新的协议，而是`http`+`ssl`或者`http`+`tls`。`http`用的是明文传输，这样它传输的数据就十分的不安全，于是就有了`ssl`，用于对`http`协议传输的数据进行加密。

可是加密过程中存在一些问题

- 浏览器和服务器都使用共享密钥进行加密，如果共享密钥被窃取，那么加密就会失去意义。如何防止共享密钥不被窃取呢？
- 非对称加密，浏览器生成共享密钥，浏览器用服务器的公钥加密信息，服务器用私钥解密，这样就可以获取到共享密钥，再用共享密钥对信息进行加密。可是如何保证服务器的公钥没有被攻击者替换掉呢？
- 可以使用CA机构颁布的公开密钥证书。

所以过程为

- 浏览器给服务器发支持的加密规则
- 服务器从客户端发送来的加密规则中选取一种。
- 接着服务器把私钥发送给`CA`机构，`CA`机构会颁布一个证书。`CA`证书里包含了服务器私钥，签发者，证书用途，证书到期时间，使用的`HASH`算法，签名使用的算法等。接着会把证书内容求一个`HASH`值，再用`CA`私钥把证书内容的`HASH`及其使用的`HASH`算法进行加密，完成数字签名，服务器会把`CA`证书发给浏览器。
- 客户端拿到服务器的公钥证书之后，先验证证书的合法性。
  - 校验证书中包含的域名是否和正在访问的网站一致，证书是否过期
  - 把操作系统内置`CA`和证书颁发者`CA`进行比对，验证合法性
  - 客户端先用`CA`公钥对数字签名进行解密，取出`hash`算法。(数字签名包括`hash`算法和`CA`证书内容的`hash`），接着再用`hash`算法对`CA`证书的内容求值，校验加密后的内容和数字签名内的`hash`内容是否一致，如果一致的话，那么可以取出服务器的公钥。
- 接着，客户端就会生成共享密钥，用服务器的公钥进行加密，发送给服务器。
- 服务器用私钥把客户端发送的信息进行解密
- 之后服务器和浏览器发送信息时都用共享密钥进行加密。如果在握手过程中出现任何错误，都会使加密连接断开。

[https为什么需要证书](https://aadonkeyz.com/posts/c9a2a716/?from=from_parent_mindnote)

